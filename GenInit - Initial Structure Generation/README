Program written by Aidan Fike, July 2019
Updated by Kevin Schult, 2020, with help from Tim, Omeir, and Jovan

USAGE: To use this program run:

    python main.py [-flag argument] [-flag argument] [-flags]

    Where [-flag] is one of the below:

	-seq | Takes an argument of a string of upper- and lowercase letters to be
		the cyclic peptide sequence.

	-randseq | Takes an integer argument. Instructs the program to randomly
		generate a cyclic peptide sequence of that length.
		Only (G, A, V, F, S, N, R, D) will be used for random sequences.

	-n | Takes an integer argument that indicates the number of distinct initial
	  	structures to generate. Set to 2 by default.

	-bonds | Takes an argument of a string of 't's and 'c's that specify whether
		the peptide bond at the corresponding location should be cis or trans.
                See examples. All trans by default.

	-thresh | Takes a floating point argument. Structures will be generated
		until enough of them are -thresh angstroms different in RMSD.

	-maxTries | Takes an integer argument. If -maxTries structures have been
		generated without creating an acceptable output set, the script
		will terminate.

	-includeOxygen | Takes no argument. By default, this script
		calculates RMSD between the (C,CA,N) atoms of each structure.
		This optional flag will tell the script to use (C,CA,N,O) atoms
		in calculating RMSD.

	-h | Takes no argument. Displays help text, then terminates the script.

        -v | Takes no argument. Tells the script to produce verbose output.

        -debug | Takes no argument. Tells the script to produce all intermediate structures.

    Note that the script requires -thresh and one of -seq or -randseq to run.
    -maxTries is 20 by default. -n is 2 by default. When -bonds is not set, all
    peptide bonds are trans.

    A couple examples are:
        For a random 8mer, generate 2 structures with a minimum rmsd of 1.9A 
	that includes oxygen in rmsd calculation:
            python main.py -randseq 8 -thresh 1.9 -includeOxygen

        For a desired sequence, GNSRVGGGGG, generate 4 strucutres in 30 attempts 
        with a minimum rmsd of 3.0A:
            python main.py -seq GNSRVGGGGG -n 4 -thresh 3.0 -maxTries 30

	For a desired sequence, EasESLCGG with a cis bond between the 3rd and 4th residues,
        generate 3 strucutres in 50 attempts with a minimum rmsd of 2.1A:
            python main.py -seq EasESLCGG -bonds ttctttttt -n 3 -thresh 2.1 -maxTries 50

    Note that if your desired structure contains cis peptide bonds, there is no
    guarantee that this script will be able to produce a complete set of such structures
    due to cis peptide bonds being generally less energetically favorable than trans.

PROGRAM DESCRIPTION:
    This program is made to ease the process of running BE-Meta simulations. 
    In these simulations, to confirm convergence, it is necessary to run multiple 
    simulations starting with different initial structures. This program automates
    the process of creating an arbitrary number of initial structures. To do so,
    once a desired sequence is chosen, many potential initial structures are created
    using Chimera. These potential structures have their omega angles measured, and
    any structures with incorrect peptide bonds are removed from consideration.
    With the remaining structures, a backbone-aligned rmsd is then calculated
    between each pair of structures. The first complete set of structures with 
    acceptably large rmsd is then chosen to be the set of initial structures.

    The program begins by using Chimera to generate a structure, which is then 
    checked for incorrect chiralities using Chimera and incorrect omega angles
    using MDAnalysis. If there is an incorrect chirality, that residue is 
    inverted; if there is an incorrect omega angle, the structure is thrown out.
    After each generation of a valid structure, the rmsd between this structure
    and the other valid structures is calculated using MDAnalysis. Then, NetworkX
    (which comes with MDAnalysis) is used to determine whether a complete set
    of structures with large enough rmsd values has been generated. If so, the
    script ends and outputs those structures; if not, another structure
    generation is attempted. If a complete set isn't generated within a certain
    number of generation attempts, the script is paused, and the user is
    presented with options for how to proceed. The user may request more
    attempts, terminate while saving valid structures, or terminate without
    saving valid structures.
    
    Finally, this program assumes users have installed Chimera. Please specify the path
    to the Chimera executable in main.py and code/chimScriptMaker.py.
